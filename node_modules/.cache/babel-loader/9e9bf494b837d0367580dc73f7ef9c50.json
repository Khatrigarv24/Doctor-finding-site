{"ast":null,"code":"// Filter doctors based on search term, specialties, and consultation type\nexport const filterDoctors = (doctors, searchTerm, selectedSpecialties, consultationType) => {\n  return doctors.filter(doctor => {\n    // Ensure doctor has all necessary properties\n    if (!doctor || !doctor.name) return false;\n\n    // Filter by search term\n    const nameMatch = searchTerm === '' || doctor.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Filter by specialties\n    const specialtyMatch = selectedSpecialties.length === 0 || doctor.speciality && Array.isArray(doctor.speciality) && doctor.speciality.some(spec => selectedSpecialties.includes(spec));\n\n    // Filter by consultation type\n    const consultMatch = consultationType === '' || consultationType === 'Video Consult' && doctor.isVideoConsultAvailable || consultationType === 'In Clinic' && doctor.isInClinicAvailable;\n    return nameMatch && specialtyMatch && consultMatch;\n  });\n};\n\n// Sort doctors by fees (ascending) or experience (descending)\nexport const sortDoctors = (doctors, sortBy) => {\n  const sortedDoctors = [...doctors];\n  if (sortBy === 'fees') {\n    return sortedDoctors.sort((a, b) => a.fee - b.fee);\n  } else if (sortBy === 'experience') {\n    return sortedDoctors.sort((a, b) => b.experience - a.experience);\n  }\n  return sortedDoctors;\n};\n\n// Get unique specialties from all doctors\nexport const getUniqueSpecialties = doctors => {\n  const specialties = new Set();\n  doctors.forEach(doctor => {\n    if (doctor && doctor.speciality && Array.isArray(doctor.speciality)) {\n      doctor.speciality.forEach(spec => specialties.add(spec));\n    }\n  });\n  return Array.from(specialties);\n};\n\n// Update URL query params based on filters\nexport const updateQueryParams = (searchTerm, selectedSpecialties, consultationType, sortBy) => {\n  const params = new URLSearchParams();\n  if (searchTerm) params.set('search', searchTerm);\n  if (selectedSpecialties.length > 0) params.set('specialties', selectedSpecialties.join(','));\n  if (consultationType) params.set('consultation', consultationType);\n  if (sortBy) params.set('sort', sortBy);\n  window.history.pushState({}, '', `?${params.toString()}`);\n};\n\n// Parse URL query params\nexport const parseQueryParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  return {\n    search: params.get('search') || '',\n    specialties: params.get('specialties') ? params.get('specialties').split(',') : [],\n    consultation: params.get('consultation') || '',\n    sort: params.get('sort') || ''\n  };\n};","map":{"version":3,"names":["filterDoctors","doctors","searchTerm","selectedSpecialties","consultationType","filter","doctor","name","nameMatch","toLowerCase","includes","specialtyMatch","length","speciality","Array","isArray","some","spec","consultMatch","isVideoConsultAvailable","isInClinicAvailable","sortDoctors","sortBy","sortedDoctors","sort","a","b","fee","experience","getUniqueSpecialties","specialties","Set","forEach","add","from","updateQueryParams","params","URLSearchParams","set","join","window","history","pushState","toString","parseQueryParams","location","search","get","split","consultation"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/utils/helpers.js"],"sourcesContent":["// Filter doctors based on search term, specialties, and consultation type\nexport const filterDoctors = (doctors, searchTerm, selectedSpecialties, consultationType) => {\n  return doctors.filter(doctor => {\n    // Ensure doctor has all necessary properties\n    if (!doctor || !doctor.name) return false;\n\n    // Filter by search term\n    const nameMatch = searchTerm === '' || \n      doctor.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Filter by specialties\n    const specialtyMatch = selectedSpecialties.length === 0 || \n      (doctor.speciality && Array.isArray(doctor.speciality) && \n        doctor.speciality.some(spec => selectedSpecialties.includes(spec)));\n\n    // Filter by consultation type\n    const consultMatch = consultationType === '' || \n      (consultationType === 'Video Consult' && doctor.isVideoConsultAvailable) ||\n      (consultationType === 'In Clinic' && doctor.isInClinicAvailable);\n\n    return nameMatch && specialtyMatch && consultMatch;\n  });\n};\n\n// Sort doctors by fees (ascending) or experience (descending)\nexport const sortDoctors = (doctors, sortBy) => {\n  const sortedDoctors = [...doctors];\n  \n  if (sortBy === 'fees') {\n    return sortedDoctors.sort((a, b) => a.fee - b.fee);\n  } else if (sortBy === 'experience') {\n    return sortedDoctors.sort((a, b) => b.experience - a.experience);\n  }\n  \n  return sortedDoctors;\n};\n\n// Get unique specialties from all doctors\nexport const getUniqueSpecialties = (doctors) => {\n  const specialties = new Set();\n  doctors.forEach(doctor => {\n    if (doctor && doctor.speciality && Array.isArray(doctor.speciality)) {\n      doctor.speciality.forEach(spec => specialties.add(spec));\n    }\n  });\n  return Array.from(specialties);\n};\n\n// Update URL query params based on filters\nexport const updateQueryParams = (searchTerm, selectedSpecialties, consultationType, sortBy) => {\n  const params = new URLSearchParams();\n  \n  if (searchTerm) params.set('search', searchTerm);\n  if (selectedSpecialties.length > 0) params.set('specialties', selectedSpecialties.join(','));\n  if (consultationType) params.set('consultation', consultationType);\n  if (sortBy) params.set('sort', sortBy);\n  \n  window.history.pushState({}, '', `?${params.toString()}`);\n};\n\n// Parse URL query params\nexport const parseQueryParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  \n  return {\n    search: params.get('search') || '',\n    specialties: params.get('specialties') ? params.get('specialties').split(',') : [],\n    consultation: params.get('consultation') || '',\n    sort: params.get('sort') || ''\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}