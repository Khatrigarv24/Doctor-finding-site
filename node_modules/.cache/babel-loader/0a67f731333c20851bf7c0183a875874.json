{"ast":null,"code":"// Filter doctors based on search term, specialties, and consultation type\nexport const filterDoctors = (doctors, searchTerm, selectedSpecialties, consultationType) => {\n  // Log filter criteria for debugging\n  console.log(\"Filtering with criteria:\", {\n    searchTerm,\n    selectedSpecialties,\n    consultationType,\n    doctorsCount: doctors.length\n  });\n  return doctors.filter(doctor => {\n    // Ensure doctor has all necessary properties\n    if (!doctor) {\n      console.warn(\"Found undefined doctor in array\");\n      return false;\n    }\n    if (!doctor.name) {\n      console.warn(\"Doctor without name:\", doctor);\n      return false;\n    }\n\n    // Filter by search term\n    const nameMatch = searchTerm === '' || doctor.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Filter by specialties\n    let specialtyMatch = selectedSpecialties.length === 0;\n    if (!specialtyMatch && doctor.speciality && Array.isArray(doctor.speciality)) {\n      specialtyMatch = doctor.speciality.some(spec => selectedSpecialties.includes(spec));\n    }\n\n    // Filter by consultation type\n    let consultMatch = consultationType === '';\n    if (!consultMatch) {\n      if (consultationType === 'Video Consult') {\n        consultMatch = doctor.isVideoConsultAvailable === true;\n      } else if (consultationType === 'In Clinic') {\n        consultMatch = doctor.isInClinicAvailable === true;\n      }\n    }\n\n    // Log filtering result for debugging specific doctors\n    if (!nameMatch || !specialtyMatch || !consultMatch) {\n      console.debug(`Doctor ${doctor.name} filtered out: nameMatch=${nameMatch}, specialtyMatch=${specialtyMatch}, consultMatch=${consultMatch}`);\n    }\n    return nameMatch && specialtyMatch && consultMatch;\n  });\n};\n\n// Sort doctors by fees (ascending) or experience (descending)\nexport const sortDoctors = (doctors, sortBy) => {\n  if (!doctors || doctors.length === 0) {\n    console.warn(\"No doctors to sort\");\n    return [];\n  }\n  const sortedDoctors = [...doctors];\n  if (sortBy === 'fees') {\n    return sortedDoctors.sort((a, b) => {\n      const feeA = a.fee || 0;\n      const feeB = b.fee || 0;\n      return feeA - feeB;\n    });\n  } else if (sortBy === 'experience') {\n    return sortedDoctors.sort((a, b) => {\n      const expA = b.experience || 0;\n      const expB = a.experience || 0;\n      return expA - expB;\n    });\n  }\n  return sortedDoctors;\n};\n\n// Get unique specialties from all doctors\nexport const getUniqueSpecialties = doctors => {\n  console.log(\"Getting specialties from doctors:\", doctors);\n  const specialties = new Set();\n  if (!doctors || !Array.isArray(doctors)) {\n    console.warn(\"Invalid doctors data for extracting specialties:\", doctors);\n    return [];\n  }\n  doctors.forEach(doctor => {\n    if (doctor && doctor.speciality && Array.isArray(doctor.speciality)) {\n      doctor.speciality.forEach(spec => {\n        if (spec) {\n          console.log(\"Adding specialty:\", spec);\n          specialties.add(spec);\n        }\n      });\n    } else {\n      console.warn(\"Doctor with missing or invalid speciality:\", doctor);\n    }\n  });\n  const result = Array.from(specialties);\n  console.log(\"Extracted specialties:\", result);\n  return result;\n};\n\n// Update URL query params based on filters\nexport const updateQueryParams = (searchTerm, selectedSpecialties, consultationType, sortBy) => {\n  const params = new URLSearchParams();\n  if (searchTerm) params.set('search', searchTerm);\n  if (selectedSpecialties.length > 0) params.set('specialties', selectedSpecialties.join(','));\n  if (consultationType) params.set('consultation', consultationType);\n  if (sortBy) params.set('sort', sortBy);\n  window.history.pushState({}, '', `?${params.toString()}`);\n};\n\n// Parse URL query params\nexport const parseQueryParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  return {\n    search: params.get('search') || '',\n    specialties: params.get('specialties') ? params.get('specialties').split(',') : [],\n    consultation: params.get('consultation') || '',\n    sort: params.get('sort') || ''\n  };\n};","map":{"version":3,"names":["filterDoctors","doctors","searchTerm","selectedSpecialties","consultationType","console","log","doctorsCount","length","filter","doctor","warn","name","nameMatch","toLowerCase","includes","specialtyMatch","speciality","Array","isArray","some","spec","consultMatch","isVideoConsultAvailable","isInClinicAvailable","debug","sortDoctors","sortBy","sortedDoctors","sort","a","b","feeA","fee","feeB","expA","experience","expB","getUniqueSpecialties","specialties","Set","forEach","add","result","from","updateQueryParams","params","URLSearchParams","set","join","window","history","pushState","toString","parseQueryParams","location","search","get","split","consultation"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/utils/helpers.js"],"sourcesContent":["// Filter doctors based on search term, specialties, and consultation type\nexport const filterDoctors = (doctors, searchTerm, selectedSpecialties, consultationType) => {\n  // Log filter criteria for debugging\n  console.log(\"Filtering with criteria:\", {\n    searchTerm,\n    selectedSpecialties,\n    consultationType,\n    doctorsCount: doctors.length\n  });\n\n  return doctors.filter(doctor => {\n    // Ensure doctor has all necessary properties\n    if (!doctor) {\n      console.warn(\"Found undefined doctor in array\");\n      return false;\n    }\n\n    if (!doctor.name) {\n      console.warn(\"Doctor without name:\", doctor);\n      return false;\n    }\n\n    // Filter by search term\n    const nameMatch = searchTerm === '' || \n      doctor.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Filter by specialties\n    let specialtyMatch = selectedSpecialties.length === 0;\n    \n    if (!specialtyMatch && doctor.speciality && Array.isArray(doctor.speciality)) {\n      specialtyMatch = doctor.speciality.some(spec => selectedSpecialties.includes(spec));\n    }\n\n    // Filter by consultation type\n    let consultMatch = consultationType === '';\n    \n    if (!consultMatch) {\n      if (consultationType === 'Video Consult') {\n        consultMatch = doctor.isVideoConsultAvailable === true;\n      } else if (consultationType === 'In Clinic') {\n        consultMatch = doctor.isInClinicAvailable === true;\n      }\n    }\n\n    // Log filtering result for debugging specific doctors\n    if (!nameMatch || !specialtyMatch || !consultMatch) {\n      console.debug(`Doctor ${doctor.name} filtered out: nameMatch=${nameMatch}, specialtyMatch=${specialtyMatch}, consultMatch=${consultMatch}`);\n    }\n\n    return nameMatch && specialtyMatch && consultMatch;\n  });\n};\n\n// Sort doctors by fees (ascending) or experience (descending)\nexport const sortDoctors = (doctors, sortBy) => {\n  if (!doctors || doctors.length === 0) {\n    console.warn(\"No doctors to sort\");\n    return [];\n  }\n\n  const sortedDoctors = [...doctors];\n  \n  if (sortBy === 'fees') {\n    return sortedDoctors.sort((a, b) => {\n      const feeA = a.fee || 0;\n      const feeB = b.fee || 0;\n      return feeA - feeB;\n    });\n  } else if (sortBy === 'experience') {\n    return sortedDoctors.sort((a, b) => {\n      const expA = b.experience || 0;\n      const expB = a.experience || 0;\n      return expA - expB;\n    });\n  }\n  \n  return sortedDoctors;\n};\n\n// Get unique specialties from all doctors\nexport const getUniqueSpecialties = (doctors) => {\n  console.log(\"Getting specialties from doctors:\", doctors);\n  \n  const specialties = new Set();\n  \n  if (!doctors || !Array.isArray(doctors)) {\n    console.warn(\"Invalid doctors data for extracting specialties:\", doctors);\n    return [];\n  }\n  \n  doctors.forEach(doctor => {\n    if (doctor && doctor.speciality && Array.isArray(doctor.speciality)) {\n      doctor.speciality.forEach(spec => {\n        if (spec) {\n          console.log(\"Adding specialty:\", spec);\n          specialties.add(spec);\n        }\n      });\n    } else {\n      console.warn(\"Doctor with missing or invalid speciality:\", doctor);\n    }\n  });\n  \n  const result = Array.from(specialties);\n  console.log(\"Extracted specialties:\", result);\n  return result;\n};\n\n// Update URL query params based on filters\nexport const updateQueryParams = (searchTerm, selectedSpecialties, consultationType, sortBy) => {\n  const params = new URLSearchParams();\n  \n  if (searchTerm) params.set('search', searchTerm);\n  if (selectedSpecialties.length > 0) params.set('specialties', selectedSpecialties.join(','));\n  if (consultationType) params.set('consultation', consultationType);\n  if (sortBy) params.set('sort', sortBy);\n  \n  window.history.pushState({}, '', `?${params.toString()}`);\n};\n\n// Parse URL query params\nexport const parseQueryParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  \n  return {\n    search: params.get('search') || '',\n    specialties: params.get('specialties') ? params.get('specialties').split(',') : [],\n    consultation: params.get('consultation') || '',\n    sort: params.get('sort') || ''\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}