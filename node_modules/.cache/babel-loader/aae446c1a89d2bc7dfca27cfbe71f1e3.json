{"ast":null,"code":"const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\n\n// Sample data as fallback if API fails\nconst SAMPLE_DOCTORS = [{\n  id: 1,\n  name: \"Dr. John Smith\",\n  speciality: [\"Cardiology\", \"Internal Medicine\"],\n  experience: 15,\n  fee: 1500,\n  image: \"https://randomuser.me/api/portraits/men/1.jpg\",\n  isVideoConsultAvailable: true,\n  isInClinicAvailable: true\n}, {\n  id: 2,\n  name: \"Dr. Sarah Johnson\",\n  speciality: [\"Dermatology\"],\n  experience: 8,\n  fee: 1200,\n  image: \"https://randomuser.me/api/portraits/women/1.jpg\",\n  isVideoConsultAvailable: true,\n  isInClinicAvailable: false\n}, {\n  id: 3,\n  name: \"Dr. Michael Williams\",\n  speciality: [\"Neurology\"],\n  experience: 12,\n  fee: 1800,\n  image: \"https://randomuser.me/api/portraits/men/2.jpg\",\n  isVideoConsultAvailable: false,\n  isInClinicAvailable: true\n}];\nexport const fetchDoctors = async () => {\n  try {\n    console.log(\"Attempting fetch from:\", API_URL, \"Origin:\", window.location.origin);\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"API response data:\", data);\n    if (Array.isArray(data)) {\n      return data;\n    } else if (data && typeof data === 'object') {\n      // Check if data has a property that's an array of doctors\n      for (const key of ['doctors', 'data', 'items', 'results']) {\n        if (Array.isArray(data[key])) {\n          return data[key];\n        }\n      }\n\n      // If we can't find an expected array structure, log the data structure\n      console.warn(\"Unexpected API response structure:\", data);\n\n      // Return an array with a single object if that's what the API returned\n      if (data.name && data.speciality) {\n        return [data];\n      }\n    }\n    console.error(\"Invalid API response format:\", data);\n    return SAMPLE_DOCTORS; // Fallback to sample data\n  } catch (error) {\n    console.error(\"Error fetching doctors:\", error);\n    return SAMPLE_DOCTORS; // Fallback to sample data\n  }\n};","map":{"version":3,"names":["API_URL","SAMPLE_DOCTORS","id","name","speciality","experience","fee","image","isVideoConsultAvailable","isInClinicAvailable","fetchDoctors","console","log","window","location","origin","response","fetch","ok","Error","status","data","json","Array","isArray","key","warn","error"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/services/api.js"],"sourcesContent":["const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\n\n// Sample data as fallback if API fails\nconst SAMPLE_DOCTORS = [\n  {\n    id: 1,\n    name: \"Dr. John Smith\",\n    speciality: [\"Cardiology\", \"Internal Medicine\"],\n    experience: 15,\n    fee: 1500,\n    image: \"https://randomuser.me/api/portraits/men/1.jpg\",\n    isVideoConsultAvailable: true,\n    isInClinicAvailable: true\n  },\n  {\n    id: 2,\n    name: \"Dr. Sarah Johnson\", \n    speciality: [\"Dermatology\"],\n    experience: 8,\n    fee: 1200,\n    image: \"https://randomuser.me/api/portraits/women/1.jpg\",\n    isVideoConsultAvailable: true,\n    isInClinicAvailable: false\n  },\n  {\n    id: 3,\n    name: \"Dr. Michael Williams\",\n    speciality: [\"Neurology\"],\n    experience: 12,\n    fee: 1800,\n    image: \"https://randomuser.me/api/portraits/men/2.jpg\",\n    isVideoConsultAvailable: false,\n    isInClinicAvailable: true\n  }\n];\n\nexport const fetchDoctors = async () => {\n  try {\n    console.log(\"Attempting fetch from:\", API_URL, \"Origin:\", window.location.origin);\n    \n    const response = await fetch(API_URL);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"API response data:\", data);\n    \n    if (Array.isArray(data)) {\n      return data;\n    } else if (data && typeof data === 'object') {\n      // Check if data has a property that's an array of doctors\n      for (const key of ['doctors', 'data', 'items', 'results']) {\n        if (Array.isArray(data[key])) {\n          return data[key];\n        }\n      }\n      \n      // If we can't find an expected array structure, log the data structure\n      console.warn(\"Unexpected API response structure:\", data);\n      \n      // Return an array with a single object if that's what the API returned\n      if (data.name && data.speciality) {\n        return [data];\n      }\n    }\n    \n    console.error(\"Invalid API response format:\", data);\n    return SAMPLE_DOCTORS; // Fallback to sample data\n  } catch (error) {\n    console.error(\"Error fetching doctors:\", error);\n    return SAMPLE_DOCTORS; // Fallback to sample data\n  }\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,8DAA8D;;AAE9E;AACA,MAAMC,cAAc,GAAG,CACrB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE,CAAC,YAAY,EAAE,mBAAmB,CAAC;EAC/CC,UAAU,EAAE,EAAE;EACdC,GAAG,EAAE,IAAI;EACTC,KAAK,EAAE,+CAA+C;EACtDC,uBAAuB,EAAE,IAAI;EAC7BC,mBAAmB,EAAE;AACvB,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,mBAAmB;EACzBC,UAAU,EAAE,CAAC,aAAa,CAAC;EAC3BC,UAAU,EAAE,CAAC;EACbC,GAAG,EAAE,IAAI;EACTC,KAAK,EAAE,iDAAiD;EACxDC,uBAAuB,EAAE,IAAI;EAC7BC,mBAAmB,EAAE;AACvB,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,sBAAsB;EAC5BC,UAAU,EAAE,CAAC,WAAW,CAAC;EACzBC,UAAU,EAAE,EAAE;EACdC,GAAG,EAAE,IAAI;EACTC,KAAK,EAAE,+CAA+C;EACtDC,uBAAuB,EAAE,KAAK;EAC9BC,mBAAmB,EAAE;AACvB,CAAC,CACF;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEZ,OAAO,EAAE,SAAS,EAAEa,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAEjF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACjB,OAAO,CAAC;IAErC,IAAI,CAACgB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCX,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAES,IAAI,CAAC;IAEvC,IAAIE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;MACvB,OAAOA,IAAI;IACb,CAAC,MAAM,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC3C;MACA,KAAK,MAAMI,GAAG,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,EAAE;QACzD,IAAIF,KAAK,CAACC,OAAO,CAACH,IAAI,CAACI,GAAG,CAAC,CAAC,EAAE;UAC5B,OAAOJ,IAAI,CAACI,GAAG,CAAC;QAClB;MACF;;MAEA;MACAd,OAAO,CAACe,IAAI,CAAC,oCAAoC,EAAEL,IAAI,CAAC;;MAExD;MACA,IAAIA,IAAI,CAAClB,IAAI,IAAIkB,IAAI,CAACjB,UAAU,EAAE;QAChC,OAAO,CAACiB,IAAI,CAAC;MACf;IACF;IAEAV,OAAO,CAACgB,KAAK,CAAC,8BAA8B,EAAEN,IAAI,CAAC;IACnD,OAAOpB,cAAc,CAAC,CAAC;EACzB,CAAC,CAAC,OAAO0B,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO1B,cAAc,CAAC,CAAC;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}