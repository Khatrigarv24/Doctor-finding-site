{"ast":null,"code":"const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\n// Fallback URLs to try if main URL fails\nconst FALLBACK_URLS = [\"https://corsproxy.io/?\" + encodeURIComponent(API_URL), \"https://api.allorigins.win/get?url=\" + encodeURIComponent(API_URL)];\nexport const fetchDoctors = async () => {\n  let lastError;\n\n  // Try main URL first, then fallbacks\n  const urlsToTry = [API_URL, ...FALLBACK_URLS];\n  for (const url of urlsToTry) {\n    try {\n      console.log(\"Attempting fetch from:\", url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      let data = await response.json();\n\n      // Handle special case for allorigins proxy\n      if (url.includes('allorigins.win') && data.contents) {\n        data = JSON.parse(data.contents);\n      }\n\n      // Process and return the data\n      if (Array.isArray(data)) {\n        console.log(\"Successfully loaded data:\", data.length, \"doctors\");\n        return data;\n      } else if (data && typeof data === 'object') {\n        // Try to extract array from various common formats\n        const doctorsArray = data.doctors || data.data || data.results || [];\n        if (doctorsArray.length > 0) {\n          console.log(\"Successfully loaded data:\", doctorsArray.length, \"doctors\");\n          return doctorsArray;\n        }\n      }\n      throw new Error(\"Invalid data format in response\");\n    } catch (error) {\n      console.error(`Error with URL ${url}:`, error);\n      lastError = error;\n      // Continue to next URL\n    }\n  }\n\n  // If we get here, all URLs failed\n  throw lastError || new Error(\"Failed to fetch doctors data from all sources\");\n};","map":{"version":3,"names":["API_URL","FALLBACK_URLS","encodeURIComponent","fetchDoctors","lastError","urlsToTry","url","console","log","response","fetch","ok","Error","status","data","json","includes","contents","JSON","parse","Array","isArray","length","doctorsArray","doctors","results","error"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/services/api.js"],"sourcesContent":["const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\n// Fallback URLs to try if main URL fails\nconst FALLBACK_URLS = [\n  \"https://corsproxy.io/?\" + encodeURIComponent(API_URL),\n  \"https://api.allorigins.win/get?url=\" + encodeURIComponent(API_URL)\n];\n\nexport const fetchDoctors = async () => {\n  let lastError;\n  \n  // Try main URL first, then fallbacks\n  const urlsToTry = [API_URL, ...FALLBACK_URLS];\n  \n  for (const url of urlsToTry) {\n    try {\n      console.log(\"Attempting fetch from:\", url);\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      let data = await response.json();\n      \n      // Handle special case for allorigins proxy\n      if (url.includes('allorigins.win') && data.contents) {\n        data = JSON.parse(data.contents);\n      }\n      \n      // Process and return the data\n      if (Array.isArray(data)) {\n        console.log(\"Successfully loaded data:\", data.length, \"doctors\");\n        return data;\n      } else if (data && typeof data === 'object') {\n        // Try to extract array from various common formats\n        const doctorsArray = data.doctors || data.data || data.results || [];\n        if (doctorsArray.length > 0) {\n          console.log(\"Successfully loaded data:\", doctorsArray.length, \"doctors\");\n          return doctorsArray;\n        }\n      }\n      \n      throw new Error(\"Invalid data format in response\");\n    } catch (error) {\n      console.error(`Error with URL ${url}:`, error);\n      lastError = error;\n      // Continue to next URL\n    }\n  }\n  \n  // If we get here, all URLs failed\n  throw lastError || new Error(\"Failed to fetch doctors data from all sources\");\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,8DAA8D;AAC9E;AACA,MAAMC,aAAa,GAAG,CACpB,wBAAwB,GAAGC,kBAAkB,CAACF,OAAO,CAAC,EACtD,qCAAqC,GAAGE,kBAAkB,CAACF,OAAO,CAAC,CACpE;AAED,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAIC,SAAS;;EAEb;EACA,MAAMC,SAAS,GAAG,CAACL,OAAO,EAAE,GAAGC,aAAa,CAAC;EAE7C,KAAK,MAAMK,GAAG,IAAID,SAAS,EAAE;IAC3B,IAAI;MACFE,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,GAAG,CAAC;MAC1C,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,CAAC;MAEjC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,IAAIC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;MAEhC;MACA,IAAIT,GAAG,CAACU,QAAQ,CAAC,gBAAgB,CAAC,IAAIF,IAAI,CAACG,QAAQ,EAAE;QACnDH,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAACG,QAAQ,CAAC;MAClC;;MAEA;MACA,IAAIG,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;QACvBP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEM,IAAI,CAACQ,MAAM,EAAE,SAAS,CAAC;QAChE,OAAOR,IAAI;MACb,CAAC,MAAM,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAC3C;QACA,MAAMS,YAAY,GAAGT,IAAI,CAACU,OAAO,IAAIV,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACW,OAAO,IAAI,EAAE;QACpE,IAAIF,YAAY,CAACD,MAAM,GAAG,CAAC,EAAE;UAC3Bf,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEe,YAAY,CAACD,MAAM,EAAE,SAAS,CAAC;UACxE,OAAOC,YAAY;QACrB;MACF;MAEA,MAAM,IAAIX,KAAK,CAAC,iCAAiC,CAAC;IACpD,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,kBAAkBpB,GAAG,GAAG,EAAEoB,KAAK,CAAC;MAC9CtB,SAAS,GAAGsB,KAAK;MACjB;IACF;EACF;;EAEA;EACA,MAAMtB,SAAS,IAAI,IAAIQ,KAAK,CAAC,+CAA+C,CAAC;AAC/E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}