{"ast":null,"code":"var _jsxFileName = \"/home/garv/Documents/bajaj/doctor-listing-app/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport FilterPanel from './FilterPanel';\nimport DoctorList from './DoctorList';\nimport { fetchDoctors } from '../services/api';\nimport { filterDoctors, sortDoctors, getUniqueSpecialties, updateQueryParams, parseQueryParams } from '../utils/helpers';\nimport '../styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [specialties, setSpecialties] = useState([]);\n  const [selectedSpecialties, setSelectedSpecialties] = useState([]);\n  const [consultationType, setConsultationType] = useState('');\n  const [sortBy, setSortBy] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch doctors data\n  useEffect(() => {\n    const getDoctors = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchDoctors();\n        console.log(\"Fetched doctors:\", data);\n        setDoctors(data);\n        setFilteredDoctors(data);\n\n        // Extract and log specialties\n        const extractedSpecialties = getUniqueSpecialties(data);\n        console.log(\"Setting specialties:\", extractedSpecialties);\n        setSpecialties(extractedSpecialties);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error in App component:\", error);\n        setError(`Failed to fetch doctors data: ${error.message}`);\n        setLoading(false);\n      }\n    };\n    getDoctors();\n  }, []);\n\n  // Load filters from URL on initial load\n  useEffect(() => {\n    if (doctors.length > 0) {\n      const params = parseQueryParams();\n      setSearchTerm(params.search);\n      setSelectedSpecialties(params.specialties);\n      setConsultationType(params.consultation);\n      setSortBy(params.sort);\n    }\n  }, [doctors]);\n\n  // Apply filters when any filter changes\n  useEffect(() => {\n    if (doctors.length > 0) {\n      // First filter\n      let filtered = filterDoctors(doctors, searchTerm, selectedSpecialties, consultationType);\n\n      // Then sort\n      if (sortBy) {\n        filtered = sortDoctors(filtered, sortBy);\n      }\n      setFilteredDoctors(filtered);\n\n      // Update URL params\n      updateQueryParams(searchTerm, selectedSpecialties, consultationType, sortBy);\n    }\n  }, [doctors, searchTerm, selectedSpecialties, consultationType, sortBy]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Find a Doctor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        doctors: doctors,\n        searchTerm: searchTerm,\n        setSearchTerm: setSearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        className: \"App-sidebar\",\n        children: /*#__PURE__*/_jsxDEV(FilterPanel, {\n          specialties: specialties,\n          selectedSpecialties: selectedSpecialties,\n          setSelectedSpecialties: setSelectedSpecialties,\n          consultationType: consultationType,\n          setConsultationType: setConsultationType,\n          sortBy: sortBy,\n          setSortBy: setSortBy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"App-content\",\n        children: /*#__PURE__*/_jsxDEV(DoctorList, {\n          doctors: filteredDoctors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nfcBAewKaOr9OB6XoQF6WhbWhNA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","FilterPanel","DoctorList","fetchDoctors","filterDoctors","sortDoctors","getUniqueSpecialties","updateQueryParams","parseQueryParams","jsxDEV","_jsxDEV","App","_s","doctors","setDoctors","filteredDoctors","setFilteredDoctors","searchTerm","setSearchTerm","specialties","setSpecialties","selectedSpecialties","setSelectedSpecialties","consultationType","setConsultationType","sortBy","setSortBy","loading","setLoading","error","setError","getDoctors","data","console","log","extractedSpecialties","message","length","params","search","consultation","sort","filtered","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport FilterPanel from './FilterPanel';\nimport DoctorList from './DoctorList';\nimport { fetchDoctors } from '../services/api';\nimport { \n  filterDoctors, \n  sortDoctors, \n  getUniqueSpecialties,\n  updateQueryParams,\n  parseQueryParams\n} from '../utils/helpers';\nimport '../styles/App.css';\n\nfunction App() {\n  const [doctors, setDoctors] = useState([]);\n  const [filteredDoctors, setFilteredDoctors] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [specialties, setSpecialties] = useState([]);\n  const [selectedSpecialties, setSelectedSpecialties] = useState([]);\n  const [consultationType, setConsultationType] = useState('');\n  const [sortBy, setSortBy] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch doctors data\n  useEffect(() => {\n    const getDoctors = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchDoctors();\n        console.log(\"Fetched doctors:\", data);\n        \n        setDoctors(data);\n        setFilteredDoctors(data);\n        \n        // Extract and log specialties\n        const extractedSpecialties = getUniqueSpecialties(data);\n        console.log(\"Setting specialties:\", extractedSpecialties);\n        setSpecialties(extractedSpecialties);\n        \n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error in App component:\", error);\n        setError(`Failed to fetch doctors data: ${error.message}`);\n        setLoading(false);\n      }\n    };\n\n    getDoctors();\n  }, []);\n\n  // Load filters from URL on initial load\n  useEffect(() => {\n    if (doctors.length > 0) {\n      const params = parseQueryParams();\n      setSearchTerm(params.search);\n      setSelectedSpecialties(params.specialties);\n      setConsultationType(params.consultation);\n      setSortBy(params.sort);\n    }\n  }, [doctors]);\n\n  // Apply filters when any filter changes\n  useEffect(() => {\n    if (doctors.length > 0) {\n      // First filter\n      let filtered = filterDoctors(doctors, searchTerm, selectedSpecialties, consultationType);\n      \n      // Then sort\n      if (sortBy) {\n        filtered = sortDoctors(filtered, sortBy);\n      }\n      \n      setFilteredDoctors(filtered);\n      \n      // Update URL params\n      updateQueryParams(searchTerm, selectedSpecialties, consultationType, sortBy);\n    }\n  }, [doctors, searchTerm, selectedSpecialties, consultationType, sortBy]);\n\n  if (loading) return <div className=\"loading\">Loading...</div>;\n  if (error) return <div className=\"error\">{error}</div>;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Find a Doctor</h1>\n        <SearchBar \n          doctors={doctors} \n          searchTerm={searchTerm} \n          setSearchTerm={setSearchTerm} \n        />\n      </header>\n      <main className=\"App-main\">\n        <aside className=\"App-sidebar\">\n          <FilterPanel \n            specialties={specialties}\n            selectedSpecialties={selectedSpecialties}\n            setSelectedSpecialties={setSelectedSpecialties}\n            consultationType={consultationType}\n            setConsultationType={setConsultationType}\n            sortBy={sortBy}\n            setSortBy={setSortBy}\n          />\n        </aside>\n        <section className=\"App-content\">\n          <DoctorList doctors={filteredDoctors} />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}