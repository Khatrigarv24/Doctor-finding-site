{"ast":null,"code":"// Get unique specialties from all doctors\nexport const getUniqueSpecialties = doctors => {\n  console.log(\"Getting specialties from doctors:\", doctors);\n  const specialties = new Set();\n  if (!doctors || !Array.isArray(doctors)) {\n    console.warn(\"Invalid doctors data for extracting specialties:\", doctors);\n    return [];\n  }\n  doctors.forEach(doctor => {\n    // Check both property names (speciality and specialities)\n    const specialtyArray = doctor.speciality || doctor.specialities || [];\n    if (Array.isArray(specialtyArray)) {\n      specialtyArray.forEach(spec => {\n        if (spec) {\n          console.log(\"Adding specialty:\", spec);\n          specialties.add(spec);\n        }\n      });\n    } else if (typeof specialtyArray === 'string') {\n      // Handle case where specialty might be a string\n      specialties.add(specialtyArray);\n    }\n  });\n  const result = Array.from(specialties);\n  console.log(\"Extracted specialties:\", result);\n  return result;\n};\n\n// Filter doctors based on search term, specialties, and consultation type\nexport const filterDoctors = (doctors, searchTerm, selectedSpecialties, consultationType) => {\n  // Log filter criteria for debugging\n  console.log(\"Filtering with criteria:\", {\n    searchTerm,\n    selectedSpecialties,\n    consultationType,\n    doctorsCount: doctors.length\n  });\n  return doctors.filter(doctor => {\n    // Ensure doctor has all necessary properties\n    if (!doctor) {\n      console.warn(\"Found undefined doctor in array\");\n      return false;\n    }\n    if (!doctor.name) {\n      console.warn(\"Doctor without name:\", doctor);\n      return false;\n    }\n\n    // Filter by search term\n    const nameMatch = searchTerm === '' || doctor.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Filter by specialties - check both property names\n    let specialtyMatch = selectedSpecialties.length === 0;\n    if (!specialtyMatch) {\n      const doctorSpecialties = doctor.speciality || doctor.specialities || [];\n      if (Array.isArray(doctorSpecialties)) {\n        specialtyMatch = doctorSpecialties.some(spec => selectedSpecialties.includes(spec));\n      } else if (typeof doctorSpecialties === 'string') {\n        specialtyMatch = selectedSpecialties.includes(doctorSpecialties);\n      }\n    }\n\n    // Filter by consultation type\n    let consultMatch = consultationType === '';\n    if (!consultMatch) {\n      if (consultationType === 'Video Consult') {\n        consultMatch = doctor.isVideoConsultAvailable === true;\n      } else if (consultationType === 'In Clinic') {\n        consultMatch = doctor.isInClinicAvailable === true;\n      }\n    }\n    return nameMatch && specialtyMatch && consultMatch;\n  });\n};\n\n// Sort doctors by fees (ascending) or experience (descending)\nexport const sortDoctors = (doctors, sortBy) => {\n  if (!doctors || doctors.length === 0) {\n    console.warn(\"No doctors to sort\");\n    return [];\n  }\n  const sortedDoctors = [...doctors];\n  if (sortBy === 'fees') {\n    return sortedDoctors.sort((a, b) => {\n      const feeA = a.fee || 0;\n      const feeB = b.fee || 0;\n      return feeA - feeB;\n    });\n  } else if (sortBy === 'experience') {\n    return sortedDoctors.sort((a, b) => {\n      const expA = b.experience || 0;\n      const expB = a.experience || 0;\n      return expA - expB;\n    });\n  }\n  return sortedDoctors;\n};\n\n// Update URL query params based on filters\nexport const updateQueryParams = (searchTerm, selectedSpecialties, consultationType, sortBy) => {\n  const params = new URLSearchParams();\n  if (searchTerm) params.set('search', searchTerm);\n  if (selectedSpecialties.length > 0) params.set('specialties', selectedSpecialties.join(','));\n  if (consultationType) params.set('consultation', consultationType);\n  if (sortBy) params.set('sort', sortBy);\n  window.history.pushState({}, '', `?${params.toString()}`);\n};\n\n// Parse URL query params\nexport const parseQueryParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  return {\n    search: params.get('search') || '',\n    specialties: params.get('specialties') ? params.get('specialties').split(',') : [],\n    consultation: params.get('consultation') || '',\n    sort: params.get('sort') || ''\n  };\n};","map":{"version":3,"names":["getUniqueSpecialties","doctors","console","log","specialties","Set","Array","isArray","warn","forEach","doctor","specialtyArray","speciality","specialities","spec","add","result","from","filterDoctors","searchTerm","selectedSpecialties","consultationType","doctorsCount","length","filter","name","nameMatch","toLowerCase","includes","specialtyMatch","doctorSpecialties","some","consultMatch","isVideoConsultAvailable","isInClinicAvailable","sortDoctors","sortBy","sortedDoctors","sort","a","b","feeA","fee","feeB","expA","experience","expB","updateQueryParams","params","URLSearchParams","set","join","window","history","pushState","toString","parseQueryParams","location","search","get","split","consultation"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/utils/helpers.js"],"sourcesContent":["// Get unique specialties from all doctors\nexport const getUniqueSpecialties = (doctors) => {\n  console.log(\"Getting specialties from doctors:\", doctors);\n  \n  const specialties = new Set();\n  \n  if (!doctors || !Array.isArray(doctors)) {\n    console.warn(\"Invalid doctors data for extracting specialties:\", doctors);\n    return [];\n  }\n  \n  doctors.forEach(doctor => {\n    // Check both property names (speciality and specialities)\n    const specialtyArray = doctor.speciality || doctor.specialities || [];\n    \n    if (Array.isArray(specialtyArray)) {\n      specialtyArray.forEach(spec => {\n        if (spec) {\n          console.log(\"Adding specialty:\", spec);\n          specialties.add(spec);\n        }\n      });\n    } else if (typeof specialtyArray === 'string') {\n      // Handle case where specialty might be a string\n      specialties.add(specialtyArray);\n    }\n  });\n  \n  const result = Array.from(specialties);\n  console.log(\"Extracted specialties:\", result);\n  return result;\n};\n\n// Filter doctors based on search term, specialties, and consultation type\nexport const filterDoctors = (doctors, searchTerm, selectedSpecialties, consultationType) => {\n  // Log filter criteria for debugging\n  console.log(\"Filtering with criteria:\", {\n    searchTerm,\n    selectedSpecialties,\n    consultationType,\n    doctorsCount: doctors.length\n  });\n\n  return doctors.filter(doctor => {\n    // Ensure doctor has all necessary properties\n    if (!doctor) {\n      console.warn(\"Found undefined doctor in array\");\n      return false;\n    }\n\n    if (!doctor.name) {\n      console.warn(\"Doctor without name:\", doctor);\n      return false;\n    }\n\n    // Filter by search term\n    const nameMatch = searchTerm === '' || \n      doctor.name.toLowerCase().includes(searchTerm.toLowerCase());\n\n    // Filter by specialties - check both property names\n    let specialtyMatch = selectedSpecialties.length === 0;\n    \n    if (!specialtyMatch) {\n      const doctorSpecialties = doctor.speciality || doctor.specialities || [];\n      \n      if (Array.isArray(doctorSpecialties)) {\n        specialtyMatch = doctorSpecialties.some(spec => \n          selectedSpecialties.includes(spec)\n        );\n      } else if (typeof doctorSpecialties === 'string') {\n        specialtyMatch = selectedSpecialties.includes(doctorSpecialties);\n      }\n    }\n\n    // Filter by consultation type\n    let consultMatch = consultationType === '';\n    \n    if (!consultMatch) {\n      if (consultationType === 'Video Consult') {\n        consultMatch = doctor.isVideoConsultAvailable === true;\n      } else if (consultationType === 'In Clinic') {\n        consultMatch = doctor.isInClinicAvailable === true;\n      }\n    }\n\n    return nameMatch && specialtyMatch && consultMatch;\n  });\n};\n\n// Sort doctors by fees (ascending) or experience (descending)\nexport const sortDoctors = (doctors, sortBy) => {\n  if (!doctors || doctors.length === 0) {\n    console.warn(\"No doctors to sort\");\n    return [];\n  }\n\n  const sortedDoctors = [...doctors];\n  \n  if (sortBy === 'fees') {\n    return sortedDoctors.sort((a, b) => {\n      const feeA = a.fee || 0;\n      const feeB = b.fee || 0;\n      return feeA - feeB;\n    });\n  } else if (sortBy === 'experience') {\n    return sortedDoctors.sort((a, b) => {\n      const expA = b.experience || 0;\n      const expB = a.experience || 0;\n      return expA - expB;\n    });\n  }\n  \n  return sortedDoctors;\n};\n\n// Update URL query params based on filters\nexport const updateQueryParams = (searchTerm, selectedSpecialties, consultationType, sortBy) => {\n  const params = new URLSearchParams();\n  \n  if (searchTerm) params.set('search', searchTerm);\n  if (selectedSpecialties.length > 0) params.set('specialties', selectedSpecialties.join(','));\n  if (consultationType) params.set('consultation', consultationType);\n  if (sortBy) params.set('sort', sortBy);\n  \n  window.history.pushState({}, '', `?${params.toString()}`);\n};\n\n// Parse URL query params\nexport const parseQueryParams = () => {\n  const params = new URLSearchParams(window.location.search);\n  \n  return {\n    search: params.get('search') || '',\n    specialties: params.get('specialties') ? params.get('specialties').split(',') : [],\n    consultation: params.get('consultation') || '',\n    sort: params.get('sort') || ''\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}