{"ast":null,"code":"const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\nexport const fetchDoctors = async () => {\n  try {\n    console.log(\"Fetching doctors from:\", API_URL);\n\n    // Add a timeout to the fetch request\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n    const response = await fetch(API_URL, {\n      signal: controller.signal,\n      headers: {\n        'Accept': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    clearTimeout(timeoutId);\n    console.log(\"Response status:\", response.status);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    // Try to parse as text first to debug\n    const rawText = await response.text();\n    console.log(\"Raw API response:\", rawText.substring(0, 100) + \"...\"); // Log first 100 chars\n\n    // Then parse as JSON\n    let data;\n    try {\n      data = JSON.parse(rawText);\n    } catch (e) {\n      console.error(\"JSON parse error:\", e);\n      throw new Error(\"Invalid JSON response from API\");\n    }\n    console.log(\"Response type:\", typeof data);\n\n    // Try different data formats\n    if (Array.isArray(data)) {\n      console.log(\"Data is an array with\", data.length, \"items\");\n      return data;\n    } else if (data && typeof data === 'object') {\n      console.log(\"Data is an object with keys:\", Object.keys(data));\n\n      // Check common formats\n      if (Array.isArray(data.doctors)) {\n        return data.doctors;\n      } else if (Array.isArray(data.data)) {\n        return data.data;\n      } else if (Array.isArray(data.results)) {\n        return data.results;\n      } else if (data.response && Array.isArray(data.response)) {\n        return data.response;\n      }\n\n      // As a last resort, search for the first array property\n      for (const key in data) {\n        if (Array.isArray(data[key])) {\n          console.log(\"Found array in property:\", key);\n          return data[key];\n        }\n      }\n      throw new Error(\"Could not find doctor array in API response\");\n    }\n    throw new Error(\"Unexpected API response format\");\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error(\"Fetch request timed out\");\n      throw new Error(\"Request timed out. Please try again later.\");\n    }\n    console.error(\"Error fetching doctors:\", error);\n    throw error; // Re-throw the error so App component can handle it\n  }\n};","map":{"version":3,"names":["API_URL","fetchDoctors","console","log","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","headers","clearTimeout","status","ok","Error","rawText","text","substring","data","JSON","parse","e","error","Array","isArray","length","Object","keys","doctors","results","key","name"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/services/api.js"],"sourcesContent":["const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\n\nexport const fetchDoctors = async () => {\n  try {\n    console.log(\"Fetching doctors from:\", API_URL);\n    \n    // Add a timeout to the fetch request\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n    \n    const response = await fetch(API_URL, { \n      signal: controller.signal,\n      headers: {\n        'Accept': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    console.log(\"Response status:\", response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    \n    // Try to parse as text first to debug\n    const rawText = await response.text();\n    console.log(\"Raw API response:\", rawText.substring(0, 100) + \"...\"); // Log first 100 chars\n    \n    // Then parse as JSON\n    let data;\n    try {\n      data = JSON.parse(rawText);\n    } catch (e) {\n      console.error(\"JSON parse error:\", e);\n      throw new Error(\"Invalid JSON response from API\");\n    }\n    \n    console.log(\"Response type:\", typeof data);\n    \n    // Try different data formats\n    if (Array.isArray(data)) {\n      console.log(\"Data is an array with\", data.length, \"items\");\n      return data;\n    } else if (data && typeof data === 'object') {\n      console.log(\"Data is an object with keys:\", Object.keys(data));\n      \n      // Check common formats\n      if (Array.isArray(data.doctors)) {\n        return data.doctors;\n      } else if (Array.isArray(data.data)) {\n        return data.data;\n      } else if (Array.isArray(data.results)) {\n        return data.results;\n      } else if (data.response && Array.isArray(data.response)) {\n        return data.response;\n      }\n      \n      // As a last resort, search for the first array property\n      for (const key in data) {\n        if (Array.isArray(data[key])) {\n          console.log(\"Found array in property:\", key);\n          return data[key];\n        }\n      }\n      \n      throw new Error(\"Could not find doctor array in API response\");\n    }\n    \n    throw new Error(\"Unexpected API response format\");\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error(\"Fetch request timed out\");\n      throw new Error(\"Request timed out. Please try again later.\");\n    }\n    console.error(\"Error fetching doctors:\", error);\n    throw error; // Re-throw the error so App component can handle it\n  }\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,8DAA8D;AAE9E,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,OAAO,CAAC;;IAE9C;IACA,MAAMI,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAE/D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,OAAO,EAAE;MACpCW,MAAM,EAAEP,UAAU,CAACO,MAAM;MACzBC,OAAO,EAAE;QACP,QAAQ,EAAE,kBAAkB;QAC5B,eAAe,EAAE;MACnB;IACF,CAAC,CAAC;IAEFC,YAAY,CAACP,SAAS,CAAC;IAEvBJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEM,QAAQ,CAACK,MAAM,CAAC;IAEhD,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBP,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC3D;;IAEA;IACA,MAAMG,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACrChB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEc,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;;IAErE;IACA,IAAIC,IAAI;IACR,IAAI;MACFA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC;IAC5B,CAAC,CAAC,OAAOM,CAAC,EAAE;MACVrB,OAAO,CAACsB,KAAK,CAAC,mBAAmB,EAAED,CAAC,CAAC;MACrC,MAAM,IAAIP,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEAd,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,OAAOiB,IAAI,CAAC;;IAE1C;IACA,IAAIK,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,EAAE;MACvBlB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEiB,IAAI,CAACO,MAAM,EAAE,OAAO,CAAC;MAC1D,OAAOP,IAAI;IACb,CAAC,MAAM,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC3ClB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEyB,MAAM,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC;;MAE9D;MACA,IAAIK,KAAK,CAACC,OAAO,CAACN,IAAI,CAACU,OAAO,CAAC,EAAE;QAC/B,OAAOV,IAAI,CAACU,OAAO;MACrB,CAAC,MAAM,IAAIL,KAAK,CAACC,OAAO,CAACN,IAAI,CAACA,IAAI,CAAC,EAAE;QACnC,OAAOA,IAAI,CAACA,IAAI;MAClB,CAAC,MAAM,IAAIK,KAAK,CAACC,OAAO,CAACN,IAAI,CAACW,OAAO,CAAC,EAAE;QACtC,OAAOX,IAAI,CAACW,OAAO;MACrB,CAAC,MAAM,IAAIX,IAAI,CAACX,QAAQ,IAAIgB,KAAK,CAACC,OAAO,CAACN,IAAI,CAACX,QAAQ,CAAC,EAAE;QACxD,OAAOW,IAAI,CAACX,QAAQ;MACtB;;MAEA;MACA,KAAK,MAAMuB,GAAG,IAAIZ,IAAI,EAAE;QACtB,IAAIK,KAAK,CAACC,OAAO,CAACN,IAAI,CAACY,GAAG,CAAC,CAAC,EAAE;UAC5B9B,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE6B,GAAG,CAAC;UAC5C,OAAOZ,IAAI,CAACY,GAAG,CAAC;QAClB;MACF;MAEA,MAAM,IAAIhB,KAAK,CAAC,6CAA6C,CAAC;IAChE;IAEA,MAAM,IAAIA,KAAK,CAAC,gCAAgC,CAAC;EACnD,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd,IAAIA,KAAK,CAACS,IAAI,KAAK,YAAY,EAAE;MAC/B/B,OAAO,CAACsB,KAAK,CAAC,yBAAyB,CAAC;MACxC,MAAM,IAAIR,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IACAd,OAAO,CAACsB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}