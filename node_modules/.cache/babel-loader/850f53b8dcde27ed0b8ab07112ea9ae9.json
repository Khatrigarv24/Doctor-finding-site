{"ast":null,"code":"const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\n\n// Sample data as fallback if API fails\nconst SAMPLE_DOCTORS = [{\n  id: 1,\n  name: \"Dr. John Smith\",\n  speciality: [\"Cardiology\", \"Internal Medicine\"],\n  experience: 15,\n  fee: 1500,\n  image: \"https://randomuser.me/api/portraits/men/1.jpg\",\n  isVideoConsultAvailable: true,\n  isInClinicAvailable: true\n}, {\n  id: 2,\n  name: \"Dr. Sarah Johnson\",\n  speciality: [\"Dermatology\"],\n  experience: 8,\n  fee: 1200,\n  image: \"https://randomuser.me/api/portraits/women/1.jpg\",\n  isVideoConsultAvailable: true,\n  isInClinicAvailable: false\n}, {\n  id: 3,\n  name: \"Dr. Michael Williams\",\n  speciality: [\"Neurology\"],\n  experience: 12,\n  fee: 1800,\n  image: \"https://randomuser.me/api/portraits/men/2.jpg\",\n  isVideoConsultAvailable: false,\n  isInClinicAvailable: true\n}];\nexport const fetchDoctors = async () => {\n  try {\n    console.log(\"Fetching doctors data from:\", API_URL);\n    const response = await fetch(API_URL, {\n      headers: {\n        'Accept': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    console.log(\"Response status:\", response.status);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    // Get the raw text first to debug\n    const text = await response.text();\n    console.log(\"API response length:\", text.length);\n\n    // Try parsing the text as JSON\n    let data;\n    try {\n      data = JSON.parse(text);\n    } catch (e) {\n      console.error(\"JSON parse error:\", e);\n      console.log(\"First 200 characters of response:\", text.substring(0, 200));\n      throw new Error(\"Invalid JSON response from API\");\n    }\n\n    // Log the structure of the data\n    console.log(\"Data type:\", typeof data);\n    if (Array.isArray(data)) {\n      console.log(\"Successfully loaded data:\", data.length, \"doctors\");\n      return data;\n    } else if (typeof data === 'object' && data !== null) {\n      console.log(\"Data keys:\", Object.keys(data));\n\n      // Try to find an array in the response\n      for (const key of ['doctors', 'data', 'results', 'items', 'list']) {\n        if (Array.isArray(data[key])) {\n          console.log(`Found doctors array in '${key}' property:`, data[key].length, \"doctors\");\n          return data[key];\n        }\n      }\n\n      // If there's no array but there's a single doctor object\n      if (data.name && data.speciality) {\n        console.log(\"Found a single doctor object, wrapping in array\");\n        return [data];\n      }\n      console.error(\"Unexpected data structure:\", data);\n      throw new Error(\"Could not find doctor data in API response\");\n    }\n    throw new Error(\"Invalid data format in response\");\n  } catch (error) {\n    console.error(\"Error fetching doctors:\", error);\n\n    // FALLBACK: Return sample data if API fails\n    console.warn(\"Using sample doctors data as fallback\");\n    return SAMPLE_DOCTORS;\n  }\n};","map":{"version":3,"names":["API_URL","SAMPLE_DOCTORS","id","name","speciality","experience","fee","image","isVideoConsultAvailable","isInClinicAvailable","fetchDoctors","console","log","response","fetch","headers","status","ok","Error","text","length","data","JSON","parse","e","error","substring","Array","isArray","Object","keys","key","warn"],"sources":["/home/garv/Documents/bajaj/doctor-listing-app/src/services/api.js"],"sourcesContent":["const API_URL = \"https://srijandubey.github.io/campus-api-mock/SRM-C1-25.json\";\n\n// Sample data as fallback if API fails\nconst SAMPLE_DOCTORS = [\n  {\n    id: 1,\n    name: \"Dr. John Smith\",\n    speciality: [\"Cardiology\", \"Internal Medicine\"],\n    experience: 15,\n    fee: 1500,\n    image: \"https://randomuser.me/api/portraits/men/1.jpg\",\n    isVideoConsultAvailable: true,\n    isInClinicAvailable: true\n  },\n  {\n    id: 2,\n    name: \"Dr. Sarah Johnson\", \n    speciality: [\"Dermatology\"],\n    experience: 8,\n    fee: 1200,\n    image: \"https://randomuser.me/api/portraits/women/1.jpg\",\n    isVideoConsultAvailable: true,\n    isInClinicAvailable: false\n  },\n  {\n    id: 3,\n    name: \"Dr. Michael Williams\",\n    speciality: [\"Neurology\"],\n    experience: 12,\n    fee: 1800,\n    image: \"https://randomuser.me/api/portraits/men/2.jpg\",\n    isVideoConsultAvailable: false,\n    isInClinicAvailable: true\n  }\n];\n\nexport const fetchDoctors = async () => {\n  try {\n    console.log(\"Fetching doctors data from:\", API_URL);\n    \n    const response = await fetch(API_URL, {\n      headers: {\n        'Accept': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n    console.log(\"Response status:\", response.status);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    \n    // Get the raw text first to debug\n    const text = await response.text();\n    console.log(\"API response length:\", text.length);\n    \n    // Try parsing the text as JSON\n    let data;\n    try {\n      data = JSON.parse(text);\n    } catch (e) {\n      console.error(\"JSON parse error:\", e);\n      console.log(\"First 200 characters of response:\", text.substring(0, 200));\n      throw new Error(\"Invalid JSON response from API\");\n    }\n    \n    // Log the structure of the data\n    console.log(\"Data type:\", typeof data);\n    \n    if (Array.isArray(data)) {\n      console.log(\"Successfully loaded data:\", data.length, \"doctors\");\n      return data;\n    } else if (typeof data === 'object' && data !== null) {\n      console.log(\"Data keys:\", Object.keys(data));\n      \n      // Try to find an array in the response\n      for (const key of ['doctors', 'data', 'results', 'items', 'list']) {\n        if (Array.isArray(data[key])) {\n          console.log(`Found doctors array in '${key}' property:`, data[key].length, \"doctors\");\n          return data[key];\n        }\n      }\n      \n      // If there's no array but there's a single doctor object\n      if (data.name && data.speciality) {\n        console.log(\"Found a single doctor object, wrapping in array\");\n        return [data];\n      }\n      \n      console.error(\"Unexpected data structure:\", data);\n      throw new Error(\"Could not find doctor data in API response\");\n    }\n    \n    throw new Error(\"Invalid data format in response\");\n  } catch (error) {\n    console.error(\"Error fetching doctors:\", error);\n    \n    // FALLBACK: Return sample data if API fails\n    console.warn(\"Using sample doctors data as fallback\");\n    return SAMPLE_DOCTORS;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}